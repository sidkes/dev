// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "RestaurantType": Application Contexts
//
// Command:
// $ goagen
// --design=Restaurant/design
// --out=$(GOPATH)\src\Restaurant
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// CreateRestauranttypesContext provides the restauranttypes create action context.
type CreateRestauranttypesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateRestauranttypesPayload
}

// NewCreateRestauranttypesContext parses the incoming request URL and body, performs validations and creates the
// context used by the restauranttypes controller create action.
func NewCreateRestauranttypesContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateRestauranttypesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateRestauranttypesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createRestauranttypesPayload is the restauranttypes create action payload.
type createRestauranttypesPayload struct {
	// Restaurant Type Id
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Restaurant Type Name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createRestauranttypesPayload) Validate() (err error) {
	if payload.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "id"))
	}
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// Publicize creates CreateRestauranttypesPayload from createRestauranttypesPayload
func (payload *createRestauranttypesPayload) Publicize() *CreateRestauranttypesPayload {
	var pub CreateRestauranttypesPayload
	if payload.ID != nil {
		pub.ID = *payload.ID
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// CreateRestauranttypesPayload is the restauranttypes create action payload.
type CreateRestauranttypesPayload struct {
	// Restaurant Type Id
	ID string `form:"id" json:"id" yaml:"id" xml:"id"`
	// Restaurant Type Name
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateRestauranttypesPayload) Validate() (err error) {
	if payload.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "id"))
	}
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateRestauranttypesContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// DeleteRestauranttypesContext provides the restauranttypes delete action context.
type DeleteRestauranttypesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewDeleteRestauranttypesContext parses the incoming request URL and body, performs validations and creates the
// context used by the restauranttypes controller delete action.
func NewDeleteRestauranttypesContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteRestauranttypesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteRestauranttypesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteRestauranttypesContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteRestauranttypesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GetRestauranttypesContext provides the restauranttypes get action context.
type GetRestauranttypesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewGetRestauranttypesContext parses the incoming request URL and body, performs validations and creates the
// context used by the restauranttypes controller get action.
func NewGetRestauranttypesContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetRestauranttypesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetRestauranttypesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetRestauranttypesContext) OK(r *Restauranttype) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.restauranttype+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetRestauranttypesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListRestauranttypesContext provides the restauranttypes list action context.
type ListRestauranttypesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListRestauranttypesContext parses the incoming request URL and body, performs validations and creates the
// context used by the restauranttypes controller list action.
func NewListRestauranttypesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListRestauranttypesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListRestauranttypesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListRestauranttypesContext) OK(r RestauranttypeCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.restauranttype+json; type=collection")
	}
	if r == nil {
		r = RestauranttypeCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// UpdateRestauranttypesContext provides the restauranttypes update action context.
type UpdateRestauranttypesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UpdateRestauranttypesPayload
}

// NewUpdateRestauranttypesContext parses the incoming request URL and body, performs validations and creates the
// context used by the restauranttypes controller update action.
func NewUpdateRestauranttypesContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateRestauranttypesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateRestauranttypesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// updateRestauranttypesPayload is the restauranttypes update action payload.
type updateRestauranttypesPayload struct {
	// Restaurant Type Id
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Restaurant Type Name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateRestauranttypesPayload) Validate() (err error) {
	if payload.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "id"))
	}
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// Publicize creates UpdateRestauranttypesPayload from updateRestauranttypesPayload
func (payload *updateRestauranttypesPayload) Publicize() *UpdateRestauranttypesPayload {
	var pub UpdateRestauranttypesPayload
	if payload.ID != nil {
		pub.ID = *payload.ID
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// UpdateRestauranttypesPayload is the restauranttypes update action payload.
type UpdateRestauranttypesPayload struct {
	// Restaurant Type Id
	ID string `form:"id" json:"id" yaml:"id" xml:"id"`
	// Restaurant Type Name
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateRestauranttypesPayload) Validate() (err error) {
	if payload.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "id"))
	}
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateRestauranttypesContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateRestauranttypesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
